---
import albumDataJson from '../data/albumData.json';
import { loadTracksWithLyrics } from '../utils/lyrics-loader';

const albumData = albumDataJson;
const tracksWithLyrics = await loadTracksWithLyrics(albumData);
---

<html lang="en">
	<head>
		<meta charset="utf-8" />
		<link rel="icon" type="image/svg+xml" href="/favicon.svg" />
		<meta name="viewport" content="width=device-width" />
		<meta name="generator" content={Astro.generator} />
		<title>{albumData.title} - {albumData.artist}</title>
		<link rel="stylesheet" href="/css/styles.css">
		{tracksWithLyrics.map((track) => (
			<link rel="preload" href={track.url} as="audio" type="audio/mp3" />
		))}
		<script define:vars={{ albumData: { ...albumData, tracks: tracksWithLyrics } }}>
			window.albumData = albumData;
		</script>
		<script src="/js/youtube-toggle.js" is:inline></script>
	</head>
	<body>
		<div class="container">
      <div class="album-artwork-container">
          <h1 class="album-title">{albumData.title}</h1>
					<h2 class="album-artist">{albumData.artist}</h2>
      </div>

      <div class="player-controls">
        <div class="controls-top">
          <button class="control-btn prev-btn" id="prevButton">⏮</button>
          <button class="control-btn play-btn" id="playButton">▶</button>
          <button class="control-btn next-btn" id="nextButton">⏭</button>
        </div>
        <div class="controls-middle">
          <div class="progress-bar" id="progressBar">
            <div class="progress-fill" id="progressFill"></div>
          </div>
          <div class="time-display" id="timeDisplay">0:00</div>
        </div>
      </div>

			
			<div class="currently-playing" id="currentlyPlaying">
				<div class="currently-playing-header">
					<h3>Currently Playing</h3>
				</div>
				<div class="currently-playing-content">
					<div class="current-track-info" id="currentTrackInfo">
						<div class="current-track-title" id="currentTrackTitle">Select a track to play</div>
						<div class="current-track-artist" id="currentTrackArtist">{albumData.artist}</div>
					</div>
				</div>
			</div>
			
			<div class="tracklist">
				{tracksWithLyrics.map((track) => (
					<div class="track" data-track-id={track.id}>
						<div class="track-number">{track.id}</div>
						<div class="track-info">
							<div class="track-title">{track.title}</div>
						</div>
						<div class="track-duration">{track.duration}</div>
						<a href="#lyricsContainer" class="lyrics-link">Lyrics</a>
					</div>
				))}
			</div>
			
			<div class="lyrics-container" id="lyricsContainer">
				<div class="lyrics-header">
					<h3 id="lyricsTitle">Lyrics</h3>
				</div>
				<div class="lyrics-content" id="lyricsContent">
					{tracksWithLyrics.map((track, index) => (
						<div 
							class="lyrics-text hidden" 
							id={`lyricsText-${track.id}`}
							data-track-id={track.id}
							set:html={track.lyricsHtml}
						>
						</div>
					))}
				</div>
			</div>
			
      <div class="footer">This site is best viewed with either Microsoft Internet Explorer 3.0 or Higher or Netscape Navigator 3.0 or Higher</div>
		</div>

		<script src="/js/main.bundle.js" is:inline></script>
	</body>
</html>
