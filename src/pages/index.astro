---
import albumDataJson from '../data/albumData.json';
import { readFileSync } from 'fs';
import { join } from 'path';
import MarkdownIt from 'markdown-it';

const albumData = albumDataJson;
// Custom YouTube plugin for MarkdownIt
function youtubePlugin(md) {
  // Rule for ;;youtube-url;; syntax
  md.inline.ruler.before('link', 'youtube_custom', function(state, silent) {
    const start = state.pos;
    const marker = ';;';
    
    if (state.src.slice(start, start + marker.length) !== marker) {
      return false;
    }
    
    const end = state.src.indexOf(marker, start + marker.length);
    if (end === -1) {
      return false;
    }
    
    const url = state.src.slice(start + marker.length, end);
    
    // Check if it's a YouTube URL
    if (!isYouTubeUrl(url)) {
      return false;
    }
    
    if (!silent) {
      const token = state.push('youtube_embed', 'div', 0);
      token.content = url;
      token.markup = marker;
    }
    
    state.pos = end + marker.length;
    return true;
  });
  
  // Rule for standalone YouTube URLs on their own line
  md.block.ruler.before('paragraph', 'youtube_standalone', function(state, start, end, silent) {
    const pos = state.bMarks[start] + state.tShift[start];
    const max = state.eMarks[start];
    const line = state.src.slice(pos, max).trim();
    
    // Check if line is just a YouTube URL
    if (!isYouTubeUrl(line)) {
      return false;
    }
    
    // Check if it's on its own line (not part of a paragraph)
    const nextLine = start + 1;
    if (nextLine < end) {
      const nextPos = state.bMarks[nextLine] + state.tShift[nextLine];
      const nextMax = state.eMarks[nextLine];
      const nextLineContent = state.src.slice(nextPos, nextMax).trim();
      
      // If next line has content and isn't empty, treat as regular paragraph
      if (nextLineContent && !isYouTubeUrl(nextLineContent)) {
        return false;
      }
    }
    
    if (!silent) {
      const token = state.push('youtube_embed', 'div', 0);
      token.content = line;
      token.map = [start, start + 1];
    }
    
    state.line = start + 1;
    return true;
  });
  
  // Renderer for YouTube embeds
  md.renderer.rules.youtube_embed = function(tokens, idx) {
    const token = tokens[idx];
    const url = token.content;
    const embedUrl = getYouTubeEmbedUrl(url);
    
    if (!embedUrl) {
      return `<p><a href="${url}" target="_blank">${url}</a></p>`;
    }
    
    const videoId = Math.random().toString(36).substring(7);
    
    return `<div class="youtube-collapsible" data-video-id="${videoId}">
      <div class="youtube-toggle" onclick="toggleYouTubeVideo('${videoId}')">
        <span class="youtube-toggle-text">Toggle Sample</span>
        <span class="youtube-toggle-arrow">▶</span>
      </div>
      <div class="youtube-embed-container hidden" id="youtube-${videoId}">
        <iframe 
          src="" 
          data-src="${embedUrl}"
          title="YouTube video"
          frameborder="0" 
          allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture" 
          allowfullscreen
          class="youtube-embed">
        </iframe>
      </div>
    </div>`;
  };
}

function isYouTubeUrl(url) {
  try {
    const urlObj = new URL(url);
    return urlObj.hostname.includes('youtube.com') || urlObj.hostname.includes('youtu.be');
  } catch {
    return false;
  }
}

function getYouTubeEmbedUrl(url) {
  try {
    const urlObj = new URL(url);
    let videoId = '';
    
    if (urlObj.hostname.includes('youtu.be')) {
      videoId = urlObj.pathname.slice(1);
    } else if (urlObj.hostname.includes('youtube.com')) {
      videoId = urlObj.searchParams.get('v');
    }
    
    return videoId ? `https://www.youtube.com/embed/${videoId}` : null;
  } catch {
    return null;
  }
}

const md = new MarkdownIt({ 
  breaks: true,
  linkify: true,
  html: true
});

// Custom censor plugin for MarkdownIt
function censorPlugin(md) {
  md.core.ruler.after('inline', 'censor', function(state) {
    for (let i = 0; i < state.tokens.length; i++) {
      if (state.tokens[i].type === 'inline' && state.tokens[i].children) {
        let children = state.tokens[i].children;
        for (let j = 0; j < children.length; j++) {
          let child = children[j];
          if (child.type === 'text' && child.content.includes('censor')) {
            // Split the text around 'censor' and create new tokens
            let parts = child.content.split(/\b(censor)\b/);
            let newTokens = [];
            
            for (let k = 0; k < parts.length; k++) {
              if (parts[k] === 'censor') {
                // Create HTML inline token for the span
                let htmlToken = new state.Token('html_inline', '', 0);
                htmlToken.content = '<span class="censor"></span>';
                newTokens.push(htmlToken);
              } else if (parts[k]) {
                // Create text token for non-censor parts
                let textToken = new state.Token('text', '', 0);
                textToken.content = parts[k];
                newTokens.push(textToken);
              }
            }
            
            // Replace the original child with new tokens
            children.splice(j, 1, ...newTokens);
            j += newTokens.length - 1; // Adjust index for added tokens
          }
        }
      }
    }
  });
}

// Add the YouTube plugin
md.use(youtubePlugin);

// Add the censor plugin
md.use(censorPlugin);

// Configure custom renderer for images and links
md.renderer.rules.image = function (tokens, idx, options, env) {
  const token = tokens[idx];
  const src = token.attrGet('src');
  const alt = token.content || token.attrGet('alt') || '';
  
  // Check if it's a local image (same domain or relative path)
  const isLocal = !src.startsWith('http') || src.includes(window?.location?.hostname || '');
  
  if (isLocal && /\.(png|jpg|jpeg|gif|webp)$/i.test(src)) {
    return `<img src="${src}" alt="${alt}" class="modal-trigger-image" style="cursor: pointer; max-width: 100%; height: auto;">`;
  }
  
  return `<img src="${src}" alt="${alt}" style="max-width: 100%; height: auto;">`;
};

md.renderer.rules.link_open = function (tokens, idx, options, env) {
  const token = tokens[idx];
  const href = token.attrGet('href');
  
  // Check if it's a YouTube link
  if (href && (href.includes('youtube.com') || href.includes('youtu.be'))) {
    token.attrSet('class', 'modal-trigger-youtube');
    token.attrSet('style', 'cursor: pointer;');
  }
  
  // Add target="_blank" to all links
  token.attrSet('target', '_blank');
  token.attrSet('rel', 'noopener noreferrer');
  
  return `<a href="${href}" ${token.attrJoin('class') ? `class="${token.attrGet('class')}"` : ''} ${token.attrJoin('style') ? `style="${token.attrGet('style')}"` : ''} target="_blank" rel="noopener noreferrer">`;
};

// Load lyrics for each track server-side
const tracksWithLyrics = await Promise.all(albumData.tracks.map(async (track) => {
  try {
    const lyricsPath = join(process.cwd(), track.lyricsFile);
    const lyricsContent = readFileSync(lyricsPath, 'utf-8');
    
    // Use markdown-it to render markdown
    const lyricsHtml = md.render(lyricsContent);
    
    return {
      ...track,
      lyricsHtml
    };
  } catch (error) {
    console.warn(`Could not load lyrics for ${track.title}:`, error.message);
    const fallbackMarkdown = `# ${track.title}\n\n*Lyrics not available*`;
    const lyricsHtml = md.render(fallbackMarkdown);
    return {
      ...track,
      lyricsHtml
    };
  }
}));
---

<html lang="en">
	<head>
		<meta charset="utf-8" />
		<link rel="icon" type="image/svg+xml" href="/favicon.svg" />
		<meta name="viewport" content="width=device-width" />
		<meta name="generator" content={Astro.generator} />
		<title>{albumData.title} - {albumData.artist}</title>
		<script src="https://cdnjs.cloudflare.com/ajax/libs/howler/2.2.3/howler.min.js"></script>
		<link rel="stylesheet" href="/css/styles.css">
		{tracksWithLyrics.map((track) => (
			<link rel="preload" href={track.url} as="audio" type="audio/wav" />
		))}
		<script define:vars={{ albumData: { ...albumData, tracks: tracksWithLyrics } }}>
			window.albumData = albumData;
			
			// YouTube toggle functionality
			window.toggleYouTubeVideo = function(videoId) {
				const container = document.getElementById(`youtube-${videoId}`);
				const toggle = container.parentElement.querySelector('.youtube-toggle');
				const arrow = toggle.querySelector('.youtube-toggle-arrow');
				const text = toggle.querySelector('.youtube-toggle-text');
				const iframe = container.querySelector('iframe');
				
				if (container.classList.contains('hidden')) {
					// Show video
					container.classList.remove('hidden');
					arrow.classList.add('expanded');
					text.textContent = 'Hide Sample';
					
					// Load the iframe src for performance (lazy loading)
					if (iframe.dataset.src) {
						iframe.src = iframe.dataset.src;
					}
				} else {
					// Hide video and stop playback
					container.classList.add('hidden');
					arrow.classList.remove('expanded');
					text.textContent = 'Toggle Sample';
					
					// Stop video by clearing src (forces reload when reopened)
					iframe.src = '';
				}
			};
		</script>
	</head>
	<body>
		<div class="container">
			<div class="marquee-container">
				<div class="marquee-text">
					Welcome to the Logan from the internet music experience! Now playing: {albumData.title} by {albumData.artist} • Welcome to the Logan from the internet music experience! Now playing: {albumData.title} by {albumData.artist} •
				</div>
			</div>
			<div class="album-header">
				<img src={albumData.artwork} alt={albumData.title} class="album-artwork" />
				<div class="album-info">
					<h1 class="album-title">{albumData.title}</h1>
					<h2 class="album-artist">{albumData.artist}</h2>
					<p class="album-release">Released {albumData.releaseDate}</p>
					
					<div class="player-controls">
						<button class="play-button" id="playButton">PLAY</button>
						<div class="progress-bar" id="progressBar">
							<div class="progress-fill" id="progressFill"></div>
						</div>
						<div class="time-display" id="timeDisplay">0:00</div>
					</div>
				</div>
			</div>
			
			<div class="currently-playing" id="currentlyPlaying">
				<div class="currently-playing-header">
					<h3>Currently Playing</h3>
				</div>
				<div class="currently-playing-content">
					<div class="current-track-info" id="currentTrackInfo">
						<div class="current-track-title" id="currentTrackTitle">Select a track to play</div>
						<div class="current-track-artist" id="currentTrackArtist">{albumData.artist}</div>
					</div>
				</div>
			</div>
			
			<div class="tracklist">
				{tracksWithLyrics.map((track) => (
					<div class="track" data-track-id={track.id}>
						<div class="track-number">{track.id}</div>
						<div class="track-info">
							<div class="track-title">{track.title}</div>
						</div>
						<div class="track-duration">{track.duration}</div>
						<a href="#lyricsContainer" class="lyrics-link">Lyrics</a>
					</div>
				))}
			</div>
			
			<div class="lyrics-container" id="lyricsContainer">
				<div class="lyrics-header">
					<h3 id="lyricsTitle">Lyrics</h3>
				</div>
				<div class="lyrics-content" id="lyricsContent">
					{tracksWithLyrics.map((track, index) => (
						<div 
							class="lyrics-text hidden" 
							id={`lyricsText-${track.id}`}
							data-track-id={track.id}
							set:html={track.lyricsHtml}
						>
						</div>
					))}
				</div>
			</div>
			
			<div style="text-align: center; margin-top: 30px;">
				<div class="marquee-container-alt">
					<div class="marquee-text-alt">
						Best viewed in Internet Explorer 6.0!
					</div>
				</div>
			</div>
		</div>

		<script src="/js/main.bundle.js" is:inline></script>
	</body>
</html>
